#lang sicp
"1.1 solutions"
10 #; 10
(+ 5 3 4) #; 12
(- 9 1) #; 8
(/ 6 2) #; 3
(+ (* 2 4) (- 4 6)) #; 6
#; line-9/10-has-no-visible-output
(define a 3) 
(define b (+ a 1))
(+ a b (* a b)) #; 19
(= a b) #; false
(if (and (> b a) (< b (* a b)))
    b
    a) #; 4
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25)) #; 16
(+ 2 (if (> b a) b a)) #; 6
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1)) #; 16

#; 1.2-solution
(/(+ 5 4
   (- 2 3
      (+ 6
         (/ 4 5))))
  (* 3
   (- 6 2)
   (- 2 7)))

#; 1.3-solution
(define (sum-of-squares x y z)
  (+ (* x x) (* y y) (* z z)))
(define (sum-of-squares-of-two-largest a b c)
  (- (sum-of-squares a b c) (* (min a b c) (min a b c))))

(sum-of-squares 2 3 4)

#; 1.4-solution
"its defining a combination that is adding (a) with the absolute
value of (b), with parameters (a) and (b). The body of the
procedure is setting the condition that if (b) is greater then
(0), it will return (+). if not it will return (-). Then (a) and
(b) will add/subtract depending on the result from the last return."

#; 1.5-solution

"in the applicative order evaluation, (test 0 (p)) will result in a
infinite loop. because (0) abd (p) is evaluated before 'test' is invoked, so
it will return 0 from (0) but since (p) is equal to (p), it will get
locked in a loop, because (p) means (p) itself."

"in the normal-order evaluation, the arguments are not evaluated until
their values are needed. so when (test) is called, it will check if
(x) is 0 before doing anything with y. so it will just return 0
without checking on (y) which would be (p), which will lead to a loop"

#; 1.6-solution
"(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))"

"if this program is ran, there would run a infinite loop. this is
caused by the fact that new-if is it's own special form in scheme,
and not a procedure, so it will only evaulate the 'then/else' clause
and not any predicates. this error is also rooted from the differences
from applicative evaluation order vs normal order because in scheme,
arguements would be evaluated before the procedure is applied."

#; 1-7-solution

"(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (good-enough? guess prev-guess)
  (< (abs (- guess prev-guess)) 0.001))

(define (sqrt-iter guess prev-guess x)
  (if (good-enough? guess prev-guess)
      guess
      (sqrt-iter (improve guess x) guess x)))

(define (sqrt x)
  (sqrt-iter 1.0 0.0 x))

(sqrt 1)
(sqrt 9)
(sqrt 100)"

"this works better with larger numbers because it will iterate
more guesses to the square root with more guesses, the less guess
the closer to 1.0 it will be."

#; 1.18-solution

(define (cube x) (* x x x))

(define (improve guess x)
  (/ (+ (* 2 guess) (/ x (* guess guess))) 3))

(define (good-enough? guess prev-guess)
  (< (abs (- guess prev-guess)) 0.001))

(define (cbrt-iter guess prev-guess x)
  (if (good-enough? guess prev-guess)
      guess
      (cbrt-iter (improve guess x) guess x)))

(define (cbrt x)
  (cbrt-iter 1.0 0.0 x))

(cbrt 1)
(cbrt 8)
(cbrt 27)
(cbrt 1000)
